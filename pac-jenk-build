#!/bin/bash

if [ -f $HOME/.bashrc ]; then
    source $HOME/.bashrc
fi

# Lets all build in the same time zone
export TZ="usr/share/zoneinfo/UTC"

log(){
    t=$(date "+%F %T %Z")
    echo "$t $1" >> ~/.pac_jenk_build
}

# Custom slave script runner

if [ -f $HOME/pre-user.sh ]; then
    $HOME/pre-user.sh
fi

echo "Out - $OUT_DIR_COMMON_BASE - set"

PATH="$HOME/jenk-bin:$PATH"

# Read Jenkins config
export jenkins_pac_conf=$HOME/.jenkins/config
if [ -f $jenkins_pac_conf ]; then
    export CCACHE_ROOT=`grep "ccache_root" $jenkins_pac_conf | cut -d'=' -f2`
    export CCACHE_BIG=`grep "ccache_big" $jenkins_pac_conf | cut -d'=' -f2`
    export SRC_DIR=`grep "src_dir" $jenkins_pac_conf | cut -d'=' -f2`
fi

if [ -z "$SRC_DIR" ]; then
    SRC_DIR="$HOME/src"
fi

BUILD_TOP="$SRC_DIR/$Tree"

PROD_OUT_DIR="$BUILD_TOP/out/target/product/$Device"

# Min time to re-run the git reset and repo sync
# 43200 = 12 hrs
MIN_PRE_TIME=43200
# Keep out tree for ~12 hrs
MAX_OUT_TIME=43200
# Keep unused ccache dirs for no more than one week
MAX_CCACHE_UNUSED=604800

# Deal with timeouts
export GIT_HTTP_LOW_SPEED_TIME=300
export GIT_HTTP_LOW_SPEED_LIMIT=1024

export OUT_TOP=$HOME/jenkins
export OUT_BASE=$OUT_TOP/$Version

mkdir -p "$OUT_BASE"

date_no_time=`date -u +%Y%m%d`
export BASE_NAME="pac_$Device-lp-mr1-$Version-${date_no_time}"
export OUT_MD5SUM=$OUT_BASE/$BASE_NAME.zip.md5sum
export logpath=$OUT_BASE/$BASE_NAME.log
export outzip=$OUT_BASE/$BASE_NAME.zip

REMOTE_DIR=$Device/$Version
REMOTE_HOST="pacman"
REMOTE_DOWNLOAD_HOST="pacman.basketbuild.com"

# JAVA_HOME
export PATH=/usr/bin:$PATH
JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
export JAVA_HOME=$JAVA_HOME

# USE_CCACHE
export USE_CCACHE=1

cd "$BUILD_TOP"

# Colors
. ./vendor/pac/tools/colors

echo "New Game"
echo ""
echo "Server Time $BUILD_ID"
echo "Building $Device for $Tree"
echo ""
echo "Player $BUILD_NUMBER Start!"
echo ""

CheckReturn(){

    if [ $@ -ne 0 ]; then
        echo -e ${RED}"GAME OVER!"${txtrst}
        exit 1
    fi

}

get_elapsed(){
    local t1="$1"
    local t2="$2"
    local d="$((t2-t1))"
    local h=$((d/3600))
    d="$((d-h*3600))"
    local m="$((d/60))"
    d="$((d-m*60))"
    local s="$d"
    printf "%02d:%02d:%02d" $h $m $s
}


update_ota()
{
    {
    local device="$1"
    local pathname="$2"
    local filename
    local md5
    local dlurl
    local otatype
    local otaver
    filename=$(basename $pathname)
    md5=$(md5sum "$pathname" | cut -c-32)
    dlurl="http://$REMOTE_DOWNLOAD_HOST/download.php?file=main/$device/$Type/$filename"
    otatype=$Type
    otaver=${filename%.*}
    pac-push-ota "$otatype" "$device" "$otaver" "$md5" "$dlurl"
    } &> /dev/null
    echo "Sent OTA $device $filename MD5 $md5 OTA"
}

upload_file(){
    local remote_host="$1"
    local remote_dir="$2"
    local local_pathname="$3"
    local ftype="$4"

    if [ "$ftype" = "zip" ];then
        echo "bb-up upload $local_pathname"
        bb-up "$remote_dir" "$local_pathname"
    else
        echo "direct upload $local_pathname"
        ncftpput -bb -f ~/pacman "$remote_dir" "$local_pathname"
        batchid=$(pgrep ncftpbatch)
        if [[ -z $batchid ]]; then
            ncftpbatch -d
        fi
    fi
}


if [ -d "$BUILD_TOP/.repo" ]; then
    echo "Sources Found at $BUILD_TOP"
else
    echo "No Sources Configuring!"
    mkdir -p "$BUILD_TOP"
    cd "$BUILD_TOP"
    repo init -u https://github.com/PAC-man/pacman -b $Tree
    CheckReturn $?
    repo sync -j8
    CheckReturn $?
fi

# Setup ccache
CCACHE_BIN="prebuilts/misc/linux-x86/ccache/ccache"
if [ -z "$CCACHE_ROOT" ]; then
    export CCACHE_ROOT="$HOME"
fi

# Create out dir
mkdir -p $OUT_BASE

# Create ccache dir
if [ -z "$CCACHE_BIG" ]; then
    export CCACHE_DIR="$CCACHE_ROOT/.ccache-pac_$Device"
    if [ ! -d "$CCACHE_DIR" -a -x "$CCACHE_BIN" ]; then
        mkdir -p "$CCACHE_DIR"
        $CCACHE_BIN -M 8G
    fi
    touch "$CCACHE_DIR/.lastused"
else
    export CCACHE_DIR="$CCACHE_ROOT/.ccache-big-pac"
    mkdir -p $CCACHE_DIR
    $CCACHE_BIN -M $CCACHE_BIG
fi

exec &> >(tee -a $logpath)

now=$(date "+%s")
#edit 1
needs_run=1
no_reset=0

if [ -f "$OUT_TOP/.pre-script" ]; then
    t=$(stat -c "%Y" $OUT_TOP/.pre-script)
    delta=$((now-t))
    if [ $delta -lt $MIN_PRE_TIME ]; then
        needs_run=0
        echo "Sources are fine dT-$delta"
            if [ -f "$OUT_TOP/.re-sync" ]; then
                rm -f "$OUT_TOP/.re-sync"
                needs_run=1
                no_reset=1
            fi
    fi
fi

# Nuke any local manifests, in case somebody has been playing with local builds.
if [ $needs_run -ne 0 ]; then

    echo "Reseting all repositories..."
    echo ""

    # check for local branches left by extras.sh
    BRANCH_A=$(repo branch | grep auto)
    if [ ! -z "$BRANCH_A" ]; then
        repo abandon auto
    fi

    if [ -d ".repo/local_manifests" ]; then
        find ".repo/local_manifests" -type f ! -name "device.xml" -print0 | xargs -0 rm -f
    fi

    worked=0
    if [ $no_reset -eq 0 ]; then
        repo forall -c "git reset --hard HEAD; git clean -q -f"
        worked=$?
    fi
    repo sync -c "vendor/pac"
    CheckReturn $?
    pac-add-devices
    CheckReturn $?
    repo sync -j8 -c
    CheckReturn $?

    # Work around for if a package changes remotes, the first git reset will fail so sync and try again.
    # May have problems if there is a change on the tree. (but there shouldn't be on the slave tree)

    if [ $worked -ne 0 ]; then
        repo forall -c "git reset --hard HEAD; git clean -q -f"
        CheckReturn $?
        repo sync -j8 -c
        CheckReturn $?
    fi

    touch "$OUT_TOP/.pre-script"

fi

# To be sure to be sure
cd "$BUILD_TOP"

# ********************************************************************* #
# This is where we figure out who's who, and how's how, and what's what
# ********************************************************************* #

echo "Checking if this device has extras"
echo ""

if xmllint --xpath '/manifest/device[@name="'$Device'" and not(@hasextras="0")]' vendor/pac/weekly.xml &> /dev/null; then
    touch $OUT_TOP/.re-sync
    echo "Weekly with extras. Source will be re-synced after this build"
else
    echo "Normal built device. Continuing as per usual"
fi

# Hide ansi art
export JENK_ENV=1

# Build number
OLD_BN=$BUILD_NUMBER
BUILD_NUMBER="eng.$USER.$(date +%Y%m%d.%H%M%S)"
# Building
. build-pac.sh -c2 -f $Device
CheckReturn $?
BUILD_NUMBER=$OLD_BN
CheckReturn $?

# Find output zip
if [ -z $OUTDIR ]; then
    PROD_OUT_DIR="$BUILD_TOP/out/target/product/$Device"
else
    PROD_OUT_DIR="$OUTDIR/target/product/$Device"
fi

built_zip=$(ls -t $PROD_OUT_DIR/*.zip | head -1 | xargs -n1 basename)

if [ ! -f "$PROD_OUT_DIR/$built_zip" ]; then
    echo -e ""
    echo -e ${red}"Error: cannot find built zip in $built_zip"${txtrst}
    echo -e ""
    exit 1
fi

# Copy output zip to well known place
cp "$PROD_OUT_DIR/$built_zip" "$outzip"
md5sum $outzip > $OUT_MD5SUM

# Upload output zip
upload_file $REMOTE_HOST $REMOTE_DIR $outzip zip
upload_file $REMOTE_HOST $REMOTE_DIR $OUT_MD5SUM

# Update the OTA
update_ota "$Device" "$outzip"

# Cleanup the out folder
log "Cleaning old logs..."
files=$(find "$OUT_TOP" -type f -mtime +7 ! -name "*.zip")
for p in $files; do
    f=$(basename $p)
    log "Deleting old log: $f"
    rm -f "$p"
done

log "Cleaning old ROMs..."
files=$(find "$OUT_TOP" -type f -mtime +7 -name "*.zip")
for p in $files; do
    f=$(basename $p)
    log "Deleting old ROM: $f"
    rm -f "$p"
done

# Cleanup the old ccaches
if [ -z "$CCACHE_BIG" ]; then
    for pathname in $CCACHE_ROOT/.ccache-pac_*; do
        if [ ! -f "$pathname/.lastused" ]; then
            touch "$pathname/.lastused"
            continue
        fi
        t=$(stat -c "%Y" "$pathname/.lastused")
        delta=$((now-t))
        if [ "$delta" -ge "$MAX_CCACHE_UNUSED" ]; then
            log "Deleting old ccache: $pathname"
            rm -rf "$pathname"
        fi
    done
fi
